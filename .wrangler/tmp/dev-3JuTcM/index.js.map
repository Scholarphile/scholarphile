{
  "version": 3,
  "sources": ["../bundle-WszPCK/checked-fetch.js", "../../../src/index.js", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-WszPCK/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/middleware/common.ts", "../bundle-WszPCK/middleware-loader.entry.ts"],
  "sourceRoot": "/workspace/.wrangler/tmp/dev-3JuTcM",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "// Enhanced Cloudflare Worker for Scholarphile API with comprehensive functionality\n\n// Constants\nconst JWT_SECRET = 'your-super-secret-jwt-key-change-in-production';\nconst SESSION_DURATION = 24 * 60 * 60 * 1000; // 24 hours\n\n// JWT implementation using Web Crypto API\nclass JWT {\n  static async sign(payload, secret) {\n    const header = {\n      alg: 'HS256',\n      typ: 'JWT'\n    };\n\n    const encodedHeader = btoa(JSON.stringify(header)).replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n    const encodedPayload = btoa(JSON.stringify(payload)).replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n    \n    const data = `${encodedHeader}.${encodedPayload}`;\n    const encoder = new TextEncoder();\n    const key = await crypto.subtle.importKey(\n      'raw',\n      encoder.encode(secret),\n      { name: 'HMAC', hash: 'SHA-256' },\n      false,\n      ['sign']\n    );\n    \n    const signature = await crypto.subtle.sign('HMAC', key, encoder.encode(data));\n    const encodedSignature = btoa(String.fromCharCode(...new Uint8Array(signature)))\n      .replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n    \n    return `${data}.${encodedSignature}`;\n  }\n\n  static async verify(token, secret) {\n    const parts = token.split('.');\n    if (parts.length !== 3) {\n      throw new Error('Invalid token format');\n    }\n\n    const [header, payload, signature] = parts;\n    const data = `${header}.${payload}`;\n    \n    const encoder = new TextEncoder();\n    const key = await crypto.subtle.importKey(\n      'raw',\n      encoder.encode(secret),\n      { name: 'HMAC', hash: 'SHA-256' },\n      false,\n      ['verify']\n    );\n\n    const signatureBytes = Uint8Array.from(atob(signature.replace(/-/g, '+').replace(/_/g, '/')), c => c.charCodeAt(0));\n    \n    const isValid = await crypto.subtle.verify('HMAC', key, signatureBytes, encoder.encode(data));\n    \n    if (!isValid) {\n      throw new Error('Invalid signature');\n    }\n\n    return JSON.parse(atob(payload.replace(/-/g, '+').replace(/_/g, '/')));\n  }\n}\n\nexport default {\n  async fetch(request, env, ctx) {\n    const url = new URL(request.url);\n    const path = url.pathname;\n    const method = request.method;\n\n    // Enhanced CORS headers\n    const corsHeaders = {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS, PATCH',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Debug-Mode',\n      'Access-Control-Expose-Headers': 'X-Debug-Info, X-Request-Id',\n    };\n\n    // Generate request ID for debugging\n    const requestId = crypto.randomUUID();\n    const debugMode = request.headers.get('X-Debug-Mode') === 'true';\n\n    // Debug logging helper\n    const debugLog = (message, data = null) => {\n      if (debugMode) {\n        console.log(`[${requestId}] ${message}`, data || '');\n      }\n    };\n\n    debugLog('Request received', { method, path, headers: Object.fromEntries(request.headers) });\n\n    // Handle preflight requests\n    if (method === 'OPTIONS') {\n      return new Response(null, { headers: corsHeaders });\n    }\n\n    try {\n      // Add request timing\n      const startTime = Date.now();\n\n      let response;\n\n      // API routes\n      if (path.startsWith('/api/')) {\n        response = await handleAPI(request, env, path, method, debugLog, requestId);\n      }\n      // Health check with enhanced info\n      else if (path === '/health') {\n        const healthInfo = {\n          status: 'healthy',\n          timestamp: new Date().toISOString(),\n          version: '2.0.0',\n          environment: env.ENVIRONMENT || 'development',\n          requestId,\n          databases: {\n            d1: !!env.DB,\n            r2: !!env.STORAGE,\n          }\n        };\n        response = new Response(JSON.stringify(healthInfo), {\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n        });\n      }\n      // Debug endpoint\n      else if (path === '/debug' && debugMode) {\n        const debugInfo = {\n          environment: env.ENVIRONMENT || 'development',\n          timestamp: new Date().toISOString(),\n          requestId,\n          headers: Object.fromEntries(request.headers),\n          cf: request.cf,\n          url: request.url,\n        };\n        response = new Response(JSON.stringify(debugInfo, null, 2), {\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n        });\n      }\n      // Default response\n      else {\n        response = new Response('Scholarphile API - Not Found', { \n          status: 404,\n          headers: corsHeaders\n        });\n      }\n\n      // Add debug headers\n      const endTime = Date.now();\n      if (debugMode) {\n        response.headers.set('X-Debug-Info', JSON.stringify({\n          requestId,\n          duration: `${endTime - startTime}ms`,\n          timestamp: new Date().toISOString()\n        }));\n        response.headers.set('X-Request-Id', requestId);\n      }\n\n      debugLog('Response sent', { status: response.status, duration: `${endTime - startTime}ms` });\n      return response;\n\n    } catch (error) {\n      debugLog('Worker error', { error: error.message, stack: error.stack });\n      console.error('Worker error:', error);\n      \n      const errorResponse = {\n        error: 'Internal Server Error',\n        message: debugMode ? error.message : 'An error occurred',\n        requestId,\n        timestamp: new Date().toISOString()\n      };\n\n      if (debugMode) {\n        errorResponse.stack = error.stack;\n      }\n\n      return new Response(JSON.stringify(errorResponse), {\n        status: 500,\n        headers: { \n          ...corsHeaders, \n          'Content-Type': 'application/json',\n          'X-Request-Id': requestId\n        }\n      });\n    }\n  }\n};\n\n// Enhanced API route handler\nasync function handleAPI(request, env, path, method, debugLog, requestId) {\n  const corsHeaders = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS, PATCH',\n    'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Debug-Mode',\n  };\n\n  // Extract route from path\n  const routeParts = path.replace('/api/', '').split('/');\n  const route = routeParts[0];\n  const subRoute = routeParts[1];\n\n  debugLog('API route', { route, subRoute, method });\n\n  switch (route) {\n    case 'auth':\n      return await handleAuth(request, env, method, subRoute, debugLog);\n    \n    case 'documents':\n      return await handleDocuments(request, env, method, subRoute, debugLog);\n    \n    case 'users':\n      return await handleUsers(request, env, method, subRoute, debugLog);\n    \n    case 'search':\n      return await handleSearch(request, env, method, debugLog);\n    \n    case 'recommendations':\n      return await handleRecommendations(request, env, method, debugLog);\n    \n    case 'analytics':\n      return await handleAnalytics(request, env, method, debugLog);\n    \n    case 'upload':\n      return await handleUpload(request, env, method, debugLog);\n    \n    default:\n      return new Response(JSON.stringify({ \n        error: 'Route not found', \n        availableRoutes: ['auth', 'documents', 'users', 'search', 'recommendations', 'analytics', 'upload'],\n        requestId \n      }), {\n        status: 404,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n      });\n  }\n}\n\n// Authentication helper\nasync function authenticateUser(request, env) {\n  const authHeader = request.headers.get('Authorization');\n  if (!authHeader || !authHeader.startsWith('Bearer ')) {\n    return null;\n  }\n\n  const token = authHeader.substring(7);\n  \n  try {\n    // Check if token exists in database and is valid\n    const session = await env.DB.prepare(\n      'SELECT s.*, u.* FROM user_sessions s JOIN users u ON s.user_id = u.id WHERE s.token = ? AND s.expires_at > ?'\n    ).bind(token, new Date().toISOString()).first();\n\n    return session;\n  } catch (error) {\n    console.error('Auth error:', error);\n    return null;\n  }\n}\n\n// Enhanced Authentication endpoints\nasync function handleAuth(request, env, method, subRoute, debugLog) {\n  const corsHeaders = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS, PATCH',\n    'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n  };\n\n  debugLog('Auth handler', { method, subRoute });\n\n  switch (subRoute) {\n    case 'register':\n      if (method === 'POST') {\n        const { email, name, password } = await request.json();\n        \n        if (!email || !name || !password) {\n          return new Response(JSON.stringify({ error: 'Email, name, and password are required' }), {\n            status: 400,\n            headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n          });\n        }\n\n        // Check if user already exists\n        const existingUser = await env.DB.prepare(\n          'SELECT id FROM users WHERE email = ?'\n        ).bind(email).first();\n\n        if (existingUser) {\n          return new Response(JSON.stringify({ error: 'User already exists' }), {\n            status: 409,\n            headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n          });\n        }\n\n        // Create user (in production, hash the password properly)\n        const userId = crypto.randomUUID();\n        const passwordHash = await hashPassword(password); // Simple hash for demo\n\n        const { success } = await env.DB.prepare(`\n          INSERT INTO users (id, email, name, created_at, updated_at)\n          VALUES (?, ?, ?, ?, ?)\n        `).bind(userId, email, name, new Date().toISOString(), new Date().toISOString()).run();\n\n        if (success) {\n          // Create session\n          const token = crypto.randomUUID();\n          const expiresAt = new Date(Date.now() + SESSION_DURATION).toISOString();\n\n          await env.DB.prepare(`\n            INSERT INTO user_sessions (id, user_id, token, expires_at)\n            VALUES (?, ?, ?, ?)\n          `).bind(crypto.randomUUID(), userId, token, expiresAt).run();\n\n          debugLog('User registered', { userId, email });\n\n          return new Response(JSON.stringify({\n            message: 'User registered successfully',\n            user: { id: userId, email, name },\n            token,\n            expiresAt\n          }), {\n            headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n          });\n        }\n      }\n      break;\n\n    case 'login':\n      if (method === 'POST') {\n        const { email, password } = await request.json();\n        \n        if (!email || !password) {\n          return new Response(JSON.stringify({ error: 'Email and password are required' }), {\n            status: 400,\n            headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n          });\n        }\n\n        // Find user (in production, verify password hash)\n        const user = await env.DB.prepare(\n          'SELECT * FROM users WHERE email = ?'\n        ).bind(email).first();\n\n        if (!user) {\n          return new Response(JSON.stringify({ error: 'Invalid credentials' }), {\n            status: 401,\n            headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n          });\n        }\n\n        // Create session\n        const token = crypto.randomUUID();\n        const expiresAt = new Date(Date.now() + SESSION_DURATION).toISOString();\n\n        await env.DB.prepare(`\n          INSERT INTO user_sessions (id, user_id, token, expires_at)\n          VALUES (?, ?, ?, ?)\n        `).bind(crypto.randomUUID(), user.id, token, expiresAt).run();\n\n        debugLog('User logged in', { userId: user.id, email });\n\n        return new Response(JSON.stringify({\n          message: 'Login successful',\n          user: { id: user.id, email: user.email, name: user.name },\n          token,\n          expiresAt\n        }), {\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n        });\n      }\n      break;\n\n    case 'logout':\n      if (method === 'POST') {\n        const user = await authenticateUser(request, env);\n        if (!user) {\n          return new Response(JSON.stringify({ error: 'Not authenticated' }), {\n            status: 401,\n            headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n          });\n        }\n\n        // Delete session\n        await env.DB.prepare(\n          'DELETE FROM user_sessions WHERE token = ?'\n        ).bind(request.headers.get('Authorization').substring(7)).run();\n\n        debugLog('User logged out', { userId: user.id });\n\n        return new Response(JSON.stringify({ message: 'Logout successful' }), {\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n        });\n      }\n      break;\n\n    case 'me':\n      if (method === 'GET') {\n        const user = await authenticateUser(request, env);\n        if (!user) {\n          return new Response(JSON.stringify({ error: 'Not authenticated' }), {\n            status: 401,\n            headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n          });\n        }\n\n        return new Response(JSON.stringify({\n          user: {\n            id: user.id,\n            email: user.email,\n            name: user.name,\n            avatar_url: user.avatar_url,\n            created_at: user.created_at\n          }\n        }), {\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n        });\n      }\n      break;\n  }\n\n  return new Response(JSON.stringify({ error: 'Endpoint not found' }), {\n    status: 404,\n    headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n  });\n}\n\n// Enhanced Document endpoints with file processing\nasync function handleDocuments(request, env, method, subRoute, debugLog) {\n  const corsHeaders = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS, PATCH',\n    'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n  };\n\n  debugLog('Documents handler', { method, subRoute });\n\n  switch (method) {\n    case 'GET':\n      if (subRoute) {\n        // Get specific document\n        const document = await env.DB.prepare(\n          'SELECT d.*, u.name as author_name FROM documents d JOIN users u ON d.user_id = u.id WHERE d.id = ?'\n        ).bind(subRoute).first();\n\n        if (!document) {\n          return new Response(JSON.stringify({ error: 'Document not found' }), {\n            status: 404,\n            headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n          });\n        }\n\n        // Increment view count\n        await env.DB.prepare(\n          'UPDATE documents SET view_count = view_count + 1 WHERE id = ?'\n        ).bind(subRoute).run();\n\n        return new Response(JSON.stringify({ document }), {\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n        });\n      } else {\n        // Get all documents with pagination and filters\n        const url = new URL(request.url);\n        const page = parseInt(url.searchParams.get('page') || '1');\n        const limit = parseInt(url.searchParams.get('limit') || '20');\n        const courseCode = url.searchParams.get('course');\n        const year = url.searchParams.get('year');\n        const sortBy = url.searchParams.get('sort') || 'created_at';\n        const order = url.searchParams.get('order') || 'DESC';\n        const offset = (page - 1) * limit;\n\n        let query = `\n          SELECT d.*, u.name as author_name \n          FROM documents d \n          JOIN users u ON d.user_id = u.id \n          WHERE 1=1\n        `;\n        let params = [];\n\n        if (courseCode) {\n          query += ' AND d.course_code = ?';\n          params.push(courseCode);\n        }\n\n        if (year) {\n          query += ' AND d.year = ?';\n          params.push(parseInt(year));\n        }\n\n        query += ` ORDER BY d.${sortBy} ${order} LIMIT ? OFFSET ?`;\n        params.push(limit, offset);\n\n        const { results } = await env.DB.prepare(query).bind(...params).all();\n        \n        // Get total count for pagination\n        let countQuery = 'SELECT COUNT(*) as total FROM documents WHERE 1=1';\n        let countParams = [];\n        \n        if (courseCode) {\n          countQuery += ' AND course_code = ?';\n          countParams.push(courseCode);\n        }\n        \n        if (year) {\n          countQuery += ' AND year = ?';\n          countParams.push(parseInt(year));\n        }\n\n        const { total } = await env.DB.prepare(countQuery).bind(...countParams).first();\n\n        return new Response(JSON.stringify({\n          documents: results,\n          pagination: {\n            page,\n            limit,\n            total,\n            totalPages: Math.ceil(total / limit)\n          }\n        }), {\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n        });\n      }\n\n    case 'POST':\n      // Upload new document\n      const user = await authenticateUser(request, env);\n      if (!user) {\n        return new Response(JSON.stringify({ error: 'Authentication required' }), {\n          status: 401,\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n        });\n      }\n\n      const formData = await request.formData();\n      const file = formData.get('file');\n      const title = formData.get('title');\n      const description = formData.get('description');\n      const courseCode = formData.get('courseCode');\n      const courseName = formData.get('courseName');\n      const year = formData.get('year');\n      const semester = formData.get('semester');\n      const tags = formData.get('tags');\n\n      if (!file || !title) {\n        return new Response(JSON.stringify({ error: 'File and title are required' }), {\n          status: 400,\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n        });\n      }\n\n      // Process file\n      const fileBuffer = await file.arrayBuffer();\n      const fileName = `${Date.now()}-${file.name}`;\n      const fileSize = fileBuffer.byteLength;\n      const fileType = file.type;\n\n      debugLog('Processing file upload', { fileName, fileSize, fileType });\n\n      // Store file in R2 if available\n      let fileUrl = fileName;\n      if (env.STORAGE) {\n        try {\n          await env.STORAGE.put(fileName, fileBuffer);\n          fileUrl = `https://your-domain.com/files/${fileName}`;\n          debugLog('File uploaded to R2', { fileName });\n        } catch (error) {\n          debugLog('R2 upload failed', { error: error.message });\n        }\n      }\n\n      // Extract text content for search indexing (basic implementation)\n      let extractedText = '';\n      if (fileType === 'text/plain') {\n        extractedText = new TextDecoder().decode(fileBuffer);\n      }\n\n      // Save metadata to D1\n      const documentId = crypto.randomUUID();\n      const { success } = await env.DB.prepare(`\n        INSERT INTO documents (\n          id, title, description, file_url, file_size, file_type,\n          course_code, course_name, year, semester, tags, user_id,\n          created_at, updated_at\n        )\n        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n      `).bind(\n        documentId, title, description || '', fileUrl, fileSize, fileType,\n        courseCode || '', courseName || '', year ? parseInt(year) : null,\n        semester || '', tags || '[]', user.id,\n        new Date().toISOString(), new Date().toISOString()\n      ).run();\n\n      if (success) {\n        debugLog('Document saved to database', { documentId, title });\n\n        return new Response(JSON.stringify({\n          message: 'Document uploaded successfully',\n          document: {\n            id: documentId,\n            title,\n            fileUrl,\n            fileSize,\n            fileType\n          }\n        }), {\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n        });\n      } else {\n        return new Response(JSON.stringify({ error: 'Failed to save document' }), {\n          status: 500,\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n        });\n      }\n\n    case 'DELETE':\n      if (!subRoute) {\n        return new Response(JSON.stringify({ error: 'Document ID required' }), {\n          status: 400,\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n        });\n      }\n\n      const deleteUser = await authenticateUser(request, env);\n      if (!deleteUser) {\n        return new Response(JSON.stringify({ error: 'Authentication required' }), {\n          status: 401,\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n        });\n      }\n\n      // Check if user owns the document\n      const docToDelete = await env.DB.prepare(\n        'SELECT * FROM documents WHERE id = ? AND user_id = ?'\n      ).bind(subRoute, deleteUser.id).first();\n\n      if (!docToDelete) {\n        return new Response(JSON.stringify({ error: 'Document not found or access denied' }), {\n          status: 404,\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n        });\n      }\n\n      // Delete from R2 if available\n      if (env.STORAGE && docToDelete.file_url) {\n        try {\n          await env.STORAGE.delete(docToDelete.file_url);\n        } catch (error) {\n          debugLog('R2 delete failed', { error: error.message });\n        }\n      }\n\n      // Delete from database\n      await env.DB.prepare('DELETE FROM documents WHERE id = ?').bind(subRoute).run();\n\n      debugLog('Document deleted', { documentId: subRoute });\n\n      return new Response(JSON.stringify({ message: 'Document deleted successfully' }), {\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n      });\n\n    default:\n      return new Response(JSON.stringify({ error: 'Method not allowed' }), {\n        status: 405,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n      });\n  }\n}\n\n// Enhanced Search with recommendations\nasync function handleSearch(request, env, method, debugLog) {\n  const corsHeaders = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n    'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n  };\n\n  if (method === 'GET') {\n    const url = new URL(request.url);\n    const query = url.searchParams.get('q');\n    const courseCode = url.searchParams.get('course');\n    const year = url.searchParams.get('year');\n    const fileType = url.searchParams.get('type');\n    \n    if (!query) {\n      return new Response(JSON.stringify({ error: 'Search query required' }), {\n        status: 400,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n      });\n    }\n\n    debugLog('Search query', { query, courseCode, year, fileType });\n\n    // Log search for analytics\n    const user = await authenticateUser(request, env);\n    if (user) {\n      await env.DB.prepare(`\n        INSERT INTO search_history (id, user_id, query, created_at)\n        VALUES (?, ?, ?, ?)\n      `).bind(crypto.randomUUID(), user.id, query, new Date().toISOString()).run();\n    }\n\n    // Enhanced search with multiple criteria\n    let searchQuery = `\n      SELECT d.*, u.name as author_name,\n             (CASE \n               WHEN d.title LIKE ? THEN 10\n               WHEN d.description LIKE ? THEN 5\n               WHEN d.course_code LIKE ? THEN 3\n               WHEN d.tags LIKE ? THEN 2\n               ELSE 1\n             END) as relevance_score\n      FROM documents d \n      JOIN users u ON d.user_id = u.id \n      WHERE (d.title LIKE ? OR d.description LIKE ? OR d.course_code LIKE ? OR d.tags LIKE ?)\n    `;\n    \n    const searchTerm = `%${query}%`;\n    let params = [searchTerm, searchTerm, searchTerm, searchTerm, searchTerm, searchTerm, searchTerm, searchTerm];\n\n    if (courseCode) {\n      searchQuery += ' AND d.course_code = ?';\n      params.push(courseCode);\n    }\n\n    if (year) {\n      searchQuery += ' AND d.year = ?';\n      params.push(parseInt(year));\n    }\n\n    if (fileType) {\n      searchQuery += ' AND d.file_type LIKE ?';\n      params.push(`%${fileType}%`);\n    }\n\n    searchQuery += ' ORDER BY relevance_score DESC, d.view_count DESC, d.created_at DESC LIMIT 50';\n\n    const { results } = await env.DB.prepare(searchQuery).bind(...params).all();\n\n    // Update results count in search history\n    if (user) {\n      await env.DB.prepare(\n        'UPDATE search_history SET results_count = ? WHERE user_id = ? AND query = ? ORDER BY created_at DESC LIMIT 1'\n      ).bind(results.length, user.id, query).run();\n    }\n\n    debugLog('Search results', { count: results.length });\n\n    return new Response(JSON.stringify({\n      results,\n      query,\n      total: results.length,\n      timestamp: new Date().toISOString()\n    }), {\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    });\n  }\n\n  return new Response(JSON.stringify({ error: 'Method not allowed' }), {\n    status: 405,\n    headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n  });\n}\n\n// Predictive Algorithm - Recommendations\nasync function handleRecommendations(request, env, method, debugLog) {\n  const corsHeaders = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n    'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n  };\n\n  if (method === 'GET') {\n    const user = await authenticateUser(request, env);\n    if (!user) {\n      // Provide generic recommendations for unauthenticated users\n      const { results } = await env.DB.prepare(`\n        SELECT d.*, u.name as author_name \n        FROM documents d \n        JOIN users u ON d.user_id = u.id \n        ORDER BY d.view_count DESC, d.download_count DESC \n        LIMIT 10\n      `).all();\n\n      return new Response(JSON.stringify({\n        recommendations: results,\n        algorithm: 'popularity-based',\n        authenticated: false\n      }), {\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n      });\n    }\n\n    debugLog('Generating recommendations', { userId: user.id });\n\n    // Simple recommendation based on popular documents\n    const { results } = await env.DB.prepare(`\n      SELECT d.*, u.name as author_name \n      FROM documents d \n      JOIN users u ON d.user_id = u.id \n      WHERE d.user_id != ?\n      ORDER BY d.view_count DESC, d.created_at DESC \n      LIMIT 5\n    `).bind(user.id).all();\n\n    const recommendations = results.map(doc => ({\n      ...doc,\n      recommendation_reason: 'Popular content',\n      score: 0.8\n    }));\n\n    debugLog('Recommendations generated', { count: recommendations.length });\n\n    return new Response(JSON.stringify({\n      recommendations,\n      algorithm: 'popularity-based',\n      authenticated: true\n    }), {\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    });\n  }\n\n  return new Response(JSON.stringify({ error: 'Method not allowed' }), {\n    status: 405,\n    headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n  });\n}\n\n// Analytics endpoint\nasync function handleAnalytics(request, env, method, debugLog) {\n  const corsHeaders = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n    'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n  };\n\n  if (method === 'GET') {\n    const user = await authenticateUser(request, env);\n    if (!user) {\n      return new Response(JSON.stringify({ error: 'Authentication required' }), {\n        status: 401,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n      });\n    }\n\n    // Get basic analytics\n    const userStats = await env.DB.prepare(`\n      SELECT \n        (SELECT COUNT(*) FROM documents WHERE user_id = ?) as documents_uploaded,\n        (SELECT COUNT(*) FROM user_favorites WHERE user_id = ?) as favorites_count,\n        (SELECT COUNT(*) FROM search_history WHERE user_id = ?) as searches_count\n    `).bind(user.id, user.id, user.id).first();\n\n    const popularDocs = await env.DB.prepare(`\n      SELECT d.title, d.view_count, d.download_count \n      FROM documents d \n      ORDER BY d.view_count DESC \n      LIMIT 5\n    `).all();\n\n    return new Response(JSON.stringify({\n      user_stats: userStats,\n      popular_documents: popularDocs.results,\n      generated_at: new Date().toISOString()\n    }), {\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    });\n  }\n\n  return new Response(JSON.stringify({ error: 'Method not allowed' }), {\n    status: 405,\n    headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n  });\n}\n\n// Enhanced Upload handler\nasync function handleUpload(request, env, method, debugLog) {\n  const corsHeaders = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Methods': 'POST, OPTIONS',\n    'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n  };\n\n  if (method === 'POST') {\n    const user = await authenticateUser(request, env);\n    if (!user) {\n      return new Response(JSON.stringify({ error: 'Authentication required' }), {\n        status: 401,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n      });\n    }\n\n    return new Response(JSON.stringify({\n      message: 'Upload endpoint - use /api/documents instead',\n      redirect: '/api/documents'\n    }), {\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    });\n  }\n\n  return new Response(JSON.stringify({ error: 'Method not allowed' }), {\n    status: 405,\n    headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n  });\n}\n\n// User management\nasync function handleUsers(request, env, method, subRoute, debugLog) {\n  const corsHeaders = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n    'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n  };\n\n  const user = await authenticateUser(request, env);\n  if (!user) {\n    return new Response(JSON.stringify({ error: 'Authentication required' }), {\n      status: 401,\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    });\n  }\n\n  switch (subRoute) {\n    case 'profile':\n      if (method === 'GET') {\n        return new Response(JSON.stringify({ user }), {\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n        });\n      } else if (method === 'PUT') {\n        const { name, avatar_url } = await request.json();\n        \n        await env.DB.prepare(\n          'UPDATE users SET name = ?, avatar_url = ?, updated_at = ? WHERE id = ?'\n        ).bind(name || user.name, avatar_url || user.avatar_url, new Date().toISOString(), user.id).run();\n\n        return new Response(JSON.stringify({ message: 'Profile updated' }), {\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n        });\n      }\n      break;\n\n    case 'favorites':\n      if (method === 'GET') {\n        const { results } = await env.DB.prepare(`\n          SELECT d.*, u.name as author_name \n          FROM user_favorites f \n          JOIN documents d ON f.document_id = d.id \n          JOIN users u ON d.user_id = u.id\n          WHERE f.user_id = ?\n          ORDER BY f.created_at DESC\n        `).bind(user.id).all();\n\n        return new Response(JSON.stringify({ favorites: results }), {\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n        });\n      } else if (method === 'POST') {\n        const { document_id } = await request.json();\n        \n        await env.DB.prepare(`\n          INSERT OR IGNORE INTO user_favorites (id, user_id, document_id, created_at)\n          VALUES (?, ?, ?, ?)\n        `).bind(crypto.randomUUID(), user.id, document_id, new Date().toISOString()).run();\n\n        return new Response(JSON.stringify({ message: 'Added to favorites' }), {\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n        });\n      }\n      break;\n  }\n\n  return new Response(JSON.stringify({ error: 'Endpoint not found' }), {\n    status: 404,\n    headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n  });\n}\n\n// Simple password hashing (use proper bcrypt in production)\nasync function hashPassword(password) {\n  const encoder = new TextEncoder();\n  const data = encoder.encode(password);\n  const hashBuffer = await crypto.subtle.digest('SHA-256', data);\n  const hashArray = Array.from(new Uint8Array(hashBuffer));\n  return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n} ", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/workspace/src/index.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/workspace/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/workspace/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/workspace/src/index.js\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/workspace/.wrangler/tmp/bundle-WszPCK/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/workspace/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/workspace/.wrangler/tmp/bundle-WszPCK/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/workspace/.wrangler/tmp/bundle-WszPCK/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": ["courseCode", "year", "results"]
}
